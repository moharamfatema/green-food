{"version":3,"sources":["components/Navigaton.js","components/Recipe.js","components/homepage.js","OpenRecipeComponents/RecipePage.js","ProfileComponents/SignUp.js","ProfileComponents/Login.js","ProfileComponents/Weight.js","ProfileComponents/Profile.js","App.js","reportWebVitals.js","index.js"],"names":["Navigaton","Navbar","bg","variant","Container","Brand","to","alt","src","width","height","className","Nav","Link","eventKey","Recipe","recipe","label","image","calories","mealType","Card","style","pathname","Img","Body","Title","Text","yield","Math","round","Home","useState","query","setQuery","recipes","setRecipes","url","getData","Axios","get","result","data","more","alert","hits","useEffect","onSubmit","e","preventDefault","InputGroup","FormControl","placeholder","onChange","target","value","type","autoComplete","Button","id","class","fluid","map","uuidv4","RecipePage","useLocation","Row","border","text","maxHeight","maxWidth","alignSelf","onClick","window","open","Accordion","Item","Header","totalTime","cuisineType","dishType","ListGroup","healthLabels","x","i","Table","bordered","hover","size","Object","keys","totalNutrients","quantity","unit","SignUp","newUserName","setNewUserName","newPassword","setNewPassword","existingUserArr","setExistingUserArr","show","setShow","newWeight","setNewWeight","showSuccessAlert","setShowsuccessalert","currentUser","setCurrentUser","fetch","then","response","json","trim","found","forEach","user","username","method","headers","body","JSON","stringify","Date","Number","Form","Group","controlId","Label","Control","Alert","dismissible","onClose","Login","showusernamealert","setShowusernamealert","showpasswordalert","setShowpasswordalert","setUsername","password","setPassword","userIndex","Weight","props","currentWeight","length","chartType","loader","options","title","hAxis","titleTextStyle","color","vAxis","minValue","chartArea","rootProps","Profile","location","weight","updatedWeight","setUpdatedWeight","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c10f7fdc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Nav, Container, Navbar } from \"react-bootstrap\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nconst Navigaton = () => {\r\n  return (\r\n\r\n\r\n      <Navbar bg=\"light\" variant=\"light\">\r\n        <Container>\r\n          <Navbar.Brand >\r\n            <Link to='/'><img\r\n                alt=\"logo\"\r\n                src=\"https://www.logolynx.com/images/logolynx/s_6c/6c27ee419bb5f34aff0e0744900e8c71.jpeg\"\r\n                width=\"30\"\r\n                height=\"30\"\r\n                className=\"d-inline-block align-top\"\r\n            />HEALTHY FOOD</Link></Navbar.Brand>\r\n          <Nav>\r\n            <Nav.Link eventKey='home' >\r\n              <Link to=\"/\">Home</Link>\r\n            </Nav.Link>\r\n\r\n{/*\r\n            <Nav.Link eventKey='saved' ><Link to=\"/saved\">Saved</Link></Nav.Link>\r\n*/}\r\n            <Nav.Link eventKey='profile' ><Link to='/login'>< i className=\"fas fa-user-circle\"/></Link></Nav.Link>\r\n          </Nav>\r\n        </Container>\r\n      </Navbar>\r\n  );\r\n};\r\n\r\nexport default Navigaton;\r\n","import React from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\n\r\nconst Recipe = ({ recipe }) => {\r\n  const { label, image, calories, mealType} = recipe.recipe;\r\n\r\n  return (\r\n    <div className=\"d-flex justify-content-around\">\r\n  <Card style={{ width: '18rem' }} className=\"card\">\r\n    <Link to={\r\n      {pathname:'/recipe',\r\n       recipe:recipe\r\n      }\r\n    }>\r\n      <Card.Img  variant=\"top\" src={image} />\r\n    </Link>\r\n    <Card.Body>\r\n      <Card.Title>{label}</Card.Title>\r\n      <Card.Text>\r\n        Servings: {recipe.recipe.yield}<br/>\r\n        Calories/serving= {Math.round(calories/recipe.recipe.yield)} <br />\r\n        Meal: {mealType}\r\n      </Card.Text>\r\n      {/*<SavedButton />*/}\r\n    </Card.Body>\r\n  </Card>\r\n  </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import {Button, Container, FormControl, InputGroup} from \"react-bootstrap\";\r\nimport Recipe from \"./Recipe\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Axios from \"axios\";\r\n\r\n\r\n\r\n\r\nexport default function Home(){\r\n    const [query, setQuery] = useState(\"salad\");\r\n    const [recipes, setRecipes] = useState([]);\r\n    const app_id = \"4e9f05eb\";\r\n    const app_key = \"9b904d703fa0d46a88ce1ac63f29f498\";\r\n    const url = `https://api.edamam.com/search?q=${query}&app_id=${app_id}&app_key=${app_key}&calories=10-500`;\r\n    const getData = async () => {\r\n        if (query !== \"\") {\r\n            const result = await Axios.get(url);\r\n            if (!result.data.more) {\r\n                return alert(\"No food with such name\");\r\n            }\r\n            setRecipes(result.data.hits);\r\n            setQuery(\"\");\r\n        } else {\r\n            alert(\"Please, Fill this form!\");\r\n        }\r\n    };\r\n\r\n    useEffect(()=>{\r\n        setQuery('salad')\r\n        getData()\r\n        },[]);\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        getData();\r\n    };\r\n    const onChange = (e) => setQuery(e.target.value);\r\n\r\n    return(\r\n        <>\r\n            <h1>Recipes</h1>\r\n            <form onSubmit={onSubmit} className=\"search-form\">\r\n                <InputGroup className=\"mb-3\">\r\n                    <FormControl\r\n                        placeholder=\"Search\"\r\n                        aria-describedby=\"basic-addon2\"\r\n                        onChange={onChange}\r\n                        type=\"text\"\r\n                        value={query}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                    <Button variant=\"outline-primary\" id=\"search\" type=\"submit\">\r\n                        <i class=\"fas fa-search\"></i>\r\n                    </Button>\r\n                </InputGroup>\r\n            </form>\r\n            <Container className=\"recipes\" fluid>\r\n                {\r\n                    recipes !== [] &&\r\n                    recipes.map(\r\n                        (recipe) => <Recipe key={uuidv4()} recipe={recipe}/>\r\n                    )\r\n                }\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {Accordion, Button, Card, Container, ListGroup, Row, Table} from \"react-bootstrap\";\r\nimport '../App.css'\r\nimport {useLocation} from \"react-router-dom\";\r\n\r\nexport default function RecipePage ()\r\n{\r\n    let location = useLocation();\r\n    let recipe = location.recipe.recipe;\r\n    return(\r\n        <Container  className='openRecipe'  fluid>\r\n            <Row>\r\n                <Card border=\"success\" bg='light' text='dark'>\r\n                    <Card.Img variant='top' alt={recipe.label} src={recipe.image} style={{maxHeight:600,maxWidth:600,alignSelf:\"center\"}}/>\r\n                    <Card.Title>\r\n                        {recipe.label}\r\n                    </Card.Title>\r\n                    <Button variant='success' onClick={() => window.open(recipe.url)}>Go to recipe</Button>\r\n                </Card>\r\n            </Row>\r\n            <Row >\r\n                <Card>\r\n                    <Accordion variant='success'>\r\n                        <Accordion.Item eventKey={0}>\r\n                            <Accordion.Header>Cal/serving</Accordion.Header>\r\n                            <Accordion.Body>\r\n                                {Math.round(recipe.calories/recipe.yield)} kcal\r\n                            </Accordion.Body>\r\n                        </Accordion.Item>\r\n                        <Accordion.Item eventKey={1}>\r\n                            <Accordion.Header>Total Time</Accordion.Header>\r\n                            <Accordion.Body>\r\n                                {recipe.totalTime} minutes\r\n                            </Accordion.Body>\r\n                        </Accordion.Item>\r\n                        <Accordion.Item eventKey={2}>\r\n                            <Accordion.Header>Cuisine</Accordion.Header>\r\n                            <Accordion.Body>\r\n                                {recipe.cuisineType}\r\n                            </Accordion.Body>\r\n                        </Accordion.Item>\r\n                        <Accordion.Item eventKey={3}>\r\n                            <Accordion.Header>Meal Type</Accordion.Header>\r\n                            <Accordion.Body>\r\n                                {recipe.mealType}\r\n                            </Accordion.Body>\r\n                        </Accordion.Item>\r\n                        <Accordion.Item eventKey={4}>\r\n                            <Accordion.Header>Dish Type</Accordion.Header>\r\n                            <Accordion.Body>\r\n                                {recipe.dishType}\r\n                            </Accordion.Body>\r\n                        </Accordion.Item>\r\n                        <Accordion.Item eventKey={5}>\r\n                            <Accordion.Header>Servings</Accordion.Header>\r\n                            <Accordion.Body>\r\n                                {recipe.yield} serving(s)\r\n                            </Accordion.Body>\r\n                        </Accordion.Item>\r\n                        <Accordion.Item eventKey={6}>\r\n                            <Accordion.Header>Health Labels</Accordion.Header>\r\n                            <Accordion.Body>\r\n                                <ListGroup>\r\n                                    {recipe.healthLabels.map((x,i)=><ListGroup.Item key={i}>{x}</ListGroup.Item>)}\r\n                                </ListGroup>\r\n                            </Accordion.Body>\r\n                        </Accordion.Item>\r\n                        <Accordion.Item eventKey={7}>\r\n                            <Accordion.Header>Nutritional facts</Accordion.Header>\r\n                            <Accordion.Body>\r\n                                <Table bordered hover size='sm'>\r\n                                    <thead>\r\n                                    <tr>\r\n                                        <th>Label</th>\r\n                                        <th>Quantity</th>\r\n                                        <th>Unit</th>\r\n                                    </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    {Object.keys(recipe.totalNutrients)\r\n                                        .map((x,i)=>\r\n                                            <tr key={i}>\r\n                                                <td>{recipe.totalNutrients[x].label}</td>\r\n                                                <td>{Math.round(recipe.totalNutrients[x].quantity)}</td>\r\n                                                <td>{recipe.totalNutrients[x].unit}</td>\r\n                                            </tr>\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Accordion.Body>\r\n                        </Accordion.Item>\r\n                    </Accordion>\r\n                </Card>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n","import {Alert, Button, Card, Form} from \"react-bootstrap\";\r\nimport {useEffect, useState} from \"react\";\r\nimport './style.css'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default function SignUp(){\r\n    let [newUserName,setNewUserName] = useState('');\r\n    let [newPassword,setNewPassword] = useState('');\r\n    let [existingUserArr ,setExistingUserArr] = useState([]);\r\n    let [show,setShow] = useState(false);\r\n    let [newWeight,setNewWeight] = useState(0);\r\n    let [showSuccessAlert,setShowsuccessalert] = useState(false);\r\n    let [currentUser,setCurrentUser] = useState({});\r\n\r\n\r\n    /*get the users data from the server and store it in array*/\r\n    useEffect(()=>{\r\n        fetch('http://localhost:5000/users')\r\n            .then(response=>response.json())\r\n            .then(data=>{\r\n                setExistingUserArr(data)\r\n            })\r\n    },[])\r\n\r\n    const onWeightChange = (e)=>{\r\n        setNewWeight(e.target.value);\r\n\r\n    }\r\n\r\n    const onUserNameChange = (e)=>{\r\n        setNewUserName(e.target.value);\r\n\r\n    }\r\n    const onPasswordChange = (e)=>{\r\n        setNewPassword(e.target.value)\r\n    }\r\n    const onAlertClose = ()=>{setShow(false)}\r\n    const onSubmit = (e)=>{\r\n        e.preventDefault();\r\n\r\n        if (!newUserName.trim() | !newPassword.trim()){\r\n            alert(\"Please fill required fileds\");\r\n            return;\r\n        }\r\n        let found = false;\r\n        existingUserArr.forEach((user,i)=>{\r\n            /*check for matching existing username*/\r\n\r\n            if(user.username === newUserName){\r\n                found = true;\r\n            }\r\n        })\r\n        if (found) {\r\n            setShow(true);\r\n            return;\r\n        }\r\n\r\n        fetch('http://localhost:5000/users',{\r\n            method:'POST',\r\n            headers:{\r\n                'Content-type': 'application/json'\r\n            },\r\n            body:JSON.stringify(\r\n                {\r\n                    \"username\":newUserName,\r\n                    \"password\":newPassword,\r\n                    \"weight\":[\r\n                            ['Date', 'Weight'],\r\n                            [Date(), Number(newWeight)]\r\n                    ]\r\n                }\r\n            )\r\n        })\r\n            .then(response=>response.json())\r\n            .then(data=>{\r\n                setExistingUserArr([...existingUserArr,data])\r\n                setCurrentUser(data);\r\n            })\r\n        setShowsuccessalert(true);\r\n        setNewPassword('');\r\n        setNewUserName('');\r\n    }\r\n\r\n    return(\r\n        <Card className='signupCard'>\r\n            <Form onSubmit={onSubmit}>\r\n                <h1>Sign Up</h1>\r\n                <Form.Group controlId='newusername'>\r\n                    <Form.Label>Enter a username</Form.Label>\r\n                    <Form.Control aria-required={true} type='text' placeholder='Enter a username' onChange={onUserNameChange} value={newUserName}/>\r\n                    <Form.Text id='usernamewarning'/>\r\n                </Form.Group>\r\n                <Form.Group controlId='newpassword'>\r\n                    <Form.Label>Enter a password</Form.Label>\r\n                    <Form.Control type=\"password\" placeholder=\"Enter a password\" onChange={onPasswordChange} value={newPassword} />\r\n                    <Form.Text/>\r\n                </Form.Group>\r\n                <Form.Group controlId='newweight'>\r\n                    <Form.Label>Enter your weight</Form.Label>\r\n                    <Form.Control type=\"number\" placeholder=\"Enter your weight\" onChange={onWeightChange} value={newWeight} />\r\n                    <Form.Text/>\r\n                </Form.Group>\r\n                    <Button type='submit' onClick={onSubmit} variant='success'>Sign Up</Button>\r\n            </Form>\r\n            <Alert variant='danger' dismissible show={show} onClose={onAlertClose}>'username unavailable'</Alert>\r\n            <Link to={\r\n                {pathname:'/profile',\r\n                    user:currentUser\r\n                }\r\n            }><Alert variant='success' show={showSuccessAlert}>Success! click to go to profile</Alert></Link>\r\n\r\n        </Card>\r\n    )\r\n}\r\n","import {Alert, Button, Card, Form} from \"react-bootstrap\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nexport default function Login(){\r\n    let [showusernamealert,setShowusernamealert] = useState(false);\r\n    let [showpasswordalert,setShowpasswordalert] = useState(false);\r\n    let [username,setUsername] = useState('');\r\n    let [password,setPassword] = useState('');\r\n    let [existingUserArr ,setExistingUserArr] = useState([]);\r\n    let [showSuccessAlert,setShowsuccessalert] = useState(false);\r\n    let [currentUser,setCurrentUser] = useState({});\r\n\r\n\r\n    /*get the users data from the server and store it in array*/\r\n    useEffect(()=>{\r\n        fetch('http://localhost:5000/users')\r\n            .then(response=>response.json())\r\n            .then(data=>{\r\n                setExistingUserArr(data)\r\n            })\r\n\r\n\r\n    },[])\r\n\r\n\r\n\r\n\r\n    const onUserNameChange =(e)=>{\r\n        setUsername(e.target.value);\r\n    }\r\n\r\n    const onPasswordChange=(e)=>{\r\n        setPassword(e.target.value);\r\n    }\r\n\r\n    const onUsernameAlertClose = ()=>{\r\n        setShowusernamealert(false);\r\n    }\r\n    const onPasswordAlertClose = ()=>{\r\n        setShowpasswordalert(false);\r\n    }\r\n\r\n    const onSubmit = (e)=>{\r\n        e.preventDefault();\r\n\r\n        setShowpasswordalert(false);\r\n        setShowusernamealert(false);\r\n        setShowsuccessalert(false);\r\n        setCurrentUser({});\r\n\r\n        if (!username.trim() | !password.trim()){\r\n            alert(\"Please fill required fields\");\r\n            return;\r\n        }\r\n\r\n        let found = false;\r\n        let userIndex;\r\n        existingUserArr.forEach((user,i)=>{\r\n            /*check for matching existing username*/\r\n\r\n            if(user.username === username){\r\n                found = true;\r\n                userIndex = i;\r\n            }\r\n        })\r\n        if (found) {\r\n            setCurrentUser(existingUserArr[userIndex]);\r\n            if(password === currentUser.password){\r\n                //successalert\r\n                setShowsuccessalert(true);\r\n                setShowpasswordalert(false);\r\n                setShowusernamealert(false);\r\n            }else {\r\n                setShowpasswordalert(true)\r\n            }\r\n        }else {\r\n            setShowusernamealert(true);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Card className='logincard'>\r\n            <Form onSubmit={onSubmit}>\r\n                <h1>Login</h1>\r\n                <Form.Group controlId='username'>\r\n                    <Form.Label>Enter your username</Form.Label>\r\n                    <Form.Control aria-required={true} type='text' placeholder='Enter your username' onChange={onUserNameChange} value={username}/>\r\n                    <Form.Text id='usernamewarning'/>\r\n                </Form.Group>\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label>Enter your password</Form.Label>\r\n                    <Form.Control type=\"password\" placeholder=\"Enter your password\" onChange={onPasswordChange} value={password} />\r\n                    <Form.Text/>\r\n                </Form.Group>\r\n                <Button type='submit' onClick={onSubmit} variant='primary'>Login</Button>\r\n                or\r\n                <br/>\r\n                <Link to='/signup'>\r\n                    <Button  variant='success'>Sign Up</Button>\r\n                </Link>\r\n            </Form>\r\n\r\n            <Alert variant='danger' dismissible show={showusernamealert} onClose={onUsernameAlertClose}>'wrong username'</Alert>\r\n            <Alert variant='danger' dismissible show={showpasswordalert} onClose={onPasswordAlertClose}>'wrong password'</Alert>\r\n            <Link to={\r\n                {pathname:'/profile',\r\n                    user:currentUser\r\n                }\r\n            }><Alert variant='success' show={showSuccessAlert}>Success! click to go to profile</Alert></Link>\r\n\r\n        </Card>\r\n    )\r\n}\r\n","import Chart from \"react-google-charts\";\r\n\r\n\r\n\r\nexport default function Weight({props}){\r\n\r\n\r\n\r\n    let currentWeight = props[(props.length)-1][1];\r\n\r\n\r\n    return(\r\n        <>\r\n            <div>Current Weight = {currentWeight}</div>\r\n\r\n            <Chart\r\n                width={'500px'}\r\n                height={'300px'}\r\n                chartType=\"Line\"\r\n                loader={<div>Loading Weight Data</div>}\r\n                data={props}\r\n                options={{\r\n                    title: 'Weight',\r\n                    hAxis: {title: 'Year', titleTextStyle: {color: '#333'}},\r\n                    vAxis: {minValue: 20},\r\n                    // For the legend to fit, we make the chart area smaller\r\n                    chartArea: {width: '50%', height: '70%'},\r\n                    // lineWidth: 25\r\n                }}\r\n                // For tests\r\n                rootProps={{'data-testid': '1'}}\r\n            /></>\r\n    )\r\n}\r\n","import {Button, Card, Container, Form} from \"react-bootstrap\";\r\nimport Weight from \"./Weight\";\r\nimport { useState} from \"react\";\r\nimport {useLocation} from \"react-router-dom\";\r\nimport './style.css'\r\n\r\n\r\nexport default function Profile(){\r\n    const location= useLocation();\r\n    const [currentUser,setCurrentUser] = useState(location.user || {weight:[], id:0, username:\"\",password:\"\"});\r\n    const [updatedWeight,setUpdatedWeight] = useState(currentUser.weight[(currentUser.weight.length)-1][1]);\r\n\r\n\r\n    const onWeightUpdate = (e)=>{\r\n        setUpdatedWeight(e.target.value);\r\n    }\r\n    const onSubmit = (e) => {\r\n        currentUser.weight = [...currentUser.weight,[Date(),Number(updatedWeight)]]\r\n        e.preventDefault();\r\n        fetch(`http://localhost:5000/users/${currentUser.id}`,{\r\n            method:'PUT',\r\n            headers:{\r\n            'Content-type': 'application/json'\r\n        },\r\n        body:JSON.stringify(\r\n            {\r\n                \"username\":currentUser.username,\r\n                \"password\":currentUser.password,\r\n                \"weight\":currentUser.weight,\r\n                \"id\":currentUser.id\r\n            }\r\n        )\r\n        }\r\n        ).then(response => response.json())\r\n            .then(data => {\r\n                setCurrentUser(data);\r\n            })\r\n\r\n    }\r\n\r\n    return(\r\n        <Container>\r\n            <Card className='profileCard'>\r\n                <Card.Header>Your Profile</Card.Header>\r\n                <Card.Body>\r\n                    <Card.Text>\r\n                        Username: {currentUser.username}\r\n                    </Card.Text>\r\n                    <Form onSubmit={onSubmit}>\r\n                        <Form.Control type='number' placeholder=\"Enter today's weight\" onChange={onWeightUpdate} value={updatedWeight}></Form.Control>\r\n                        <Button type='submit' onClick={onSubmit} variant='primary'>Update Weight</Button>\r\n\r\n                    </Form>\r\n                    <Weight props = {currentUser.weight}/>\r\n                </Card.Body>\r\n            </Card>\r\n        </Container>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Navigaton from \"./components/Navigaton\";\r\nimport { Route, Switch} from \"react-router-dom\";\r\nimport Home from \"./components/homepage\";\r\nimport RecipePage from \"./OpenRecipeComponents/RecipePage\";\r\nimport SignUp from \"./ProfileComponents/SignUp\";\r\nimport Login from \"./ProfileComponents/Login\";\r\nimport Profile from \"./ProfileComponents/Profile\"\r\nfunction App() {\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    <Navigaton />\r\n    <Switch>\r\n        <Route exact path='/'  >\r\n            <Home/>\r\n        </Route>\r\n        <Route path='/recipe'>\r\n            <RecipePage/>\r\n        </Route>\r\n        <Route path='/signup'>\r\n            <SignUp/>\r\n        </Route>\r\n        <Route path='/login'>\r\n            <Login />\r\n        </Route>\r\n        <Route path='/profile'>\r\n\r\n            <Profile/>\r\n\r\n        </Route>\r\n    </Switch>\r\n\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <React.StrictMode>\r\n            <App />\r\n        </React.StrictMode>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}